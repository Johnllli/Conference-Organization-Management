//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2025/4/4 20:52:00
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;

namespace COM
{

    public partial class cnCOM : DbContext
    {

        public cnCOM() :
            base()
        {
            OnCreated();
        }

        public cnCOM(DbContextOptions<cnCOM> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(GetConnectionString("csCOM"));
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Conferences> Conferences
        {
            get;
            set;
        }

        public virtual DbSet<Presenter> Presenters
        {
            get;
            set;
        }

        public virtual DbSet<Presentation> Presentations
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.ConferencesMapping(modelBuilder);
            this.CustomizeConferencesMapping(modelBuilder);

            this.PresenterMapping(modelBuilder);
            this.CustomizePresenterMapping(modelBuilder);

            this.PresentationMapping(modelBuilder);
            this.CustomizePresentationMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Conferences Mapping

        private void ConferencesMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Conferences>().ToTable(@"Conferences");
            modelBuilder.Entity<Conferences>().Property(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Conferences>().Property(x => x.Title).HasColumnName(@"Title").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Conferences>().Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Conferences>().Property(x => x.EndDate).HasColumnName(@"EndDate").ValueGeneratedNever();
            modelBuilder.Entity<Conferences>().Property(x => x.Location).HasColumnName(@"Location").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Conferences>().HasKey(@"ID");
        }

        partial void CustomizeConferencesMapping(ModelBuilder modelBuilder);

        #endregion

        #region Presenter Mapping

        private void PresenterMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Presenter>().ToTable(@"Presenters");
            modelBuilder.Entity<Presenter>().Property(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Presenter>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Presenter>().Property(x => x.FieldOfExpertise).HasColumnName(@"FieldOfExpertise").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Presenter>().HasKey(@"ID");
        }

        partial void CustomizePresenterMapping(ModelBuilder modelBuilder);

        #endregion

        #region Presentation Mapping

        private void PresentationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Presentation>().ToTable(@"Presentations");
            modelBuilder.Entity<Presentation>().Property(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Presentation>().Property(x => x.ConferenceID).HasColumnName(@"ConferenceID").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Presentation>().Property(x => x.PresenterID).HasColumnName(@"PresenterID").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Presentation>().Property(x => x.PresentationTitle).HasColumnName(@"PresentationTitle").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Presentation>().Property(x => x.DateAndTime).HasColumnName(@"DateAndTime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Presentation>().HasKey(@"ID");
        }

        partial void CustomizePresentationMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Conferences>().HasMany(x => x.Presentations).WithOne(op => op.Conferences).HasForeignKey(@"ConferenceID").IsRequired(true);

            modelBuilder.Entity<Presenter>().HasMany(x => x.Presentations1).WithOne(op => op.Presenter).HasForeignKey(@"PresenterID").IsRequired(true);

            modelBuilder.Entity<Presentation>().HasOne(x => x.Conferences).WithMany(op => op.Presentations).HasForeignKey(@"ConferenceID").IsRequired(true);
            modelBuilder.Entity<Presentation>().HasOne(x => x.Presenter).WithMany(op => op.Presentations1).HasForeignKey(@"PresenterID").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
